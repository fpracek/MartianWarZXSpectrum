# file opened: martian.asm
  1   0000                      DEVICE ZXSPECTRUM48
  2   0000                      SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  3   0000
  4   0000                      ORG #8000               ; Loader address (0x8000)
  5   8000
  6   8000              start:
  7   8000 F3                   di                      ; Interrupts disabled
  8   8001
  9   8001              ;-----------------------------------------------------------------------
 10   8001              ; 1) Copy characters from ROM to RAM
 11   8001              ;-----------------------------------------------------------------------
 12   8001
 13   8001 21 00 3D             ld   HL, #3D00          ; Source ROM address
 14   8004 11 B8 88             ld   DE, RAMCharSet     ; Destination RAM address
 15   8007 01 00 03             ld   BC, 768            ; 96 characters Ã— 8 bytes = 768
 16   800A ED B0                ldir                    ; Block copy
 17   800C
 18   800C              ;-----------------------------------------------------------------------
 19   800C              ; 2) Set system to use RAM characters CHARS = 23606, 23607 (LSB, MSB)
 20   800C              ;-----------------------------------------------------------------------
 21   800C 21 B8 88             ld   HL, RAMCharSet
 22   800F 22 36 5C             ld   (23606), HL        ; Save LSB,MSB
 23   8012
 24   8012              ;-----------------------------------------------------------------------
 25   8012              ; 3) TILES REDEFINITION
 26   8012              ;-----------------------------------------------------------------------
 27   8012
 28   8012                      ;---------------------------------------------------------------
 29   8012                      ; RAMCharSet + (96-32)*8 = RAMCharSet + 64*8 = RAMCharSet + 512
 30   8012                      ;---------------------------------------------------------------
 31   8012
 32   8012 21 B8 8A             ld   HL, RAMCharSet + (96-32)*8   ; Partenza char ASCII 96
 33   8015 CD 25 80             call StaticHumanTileLoader
 34   8018
 35   8018
 36   8018
 37   8018              ;-----------------------------------------------------------------------
 38   8018              ; 4) SHOW PRESENTATION
 39   8018              ;-----------------------------------------------------------------------
 40   8018 FB                   ei                ; Interrupts enabled
 41   8019
 42   8019 06 0A                ld   b, 10    ; x=10
 43   801B 0E 05                ld   c, 5     ; y=5
 44   801D 3E 60                ld   a, 96    ; tile base= 96, (A+1)=97, (A+2)=98, (A+3)=99
 45   801F CD B5 80             call Draw16x16Tile
 46   8022              loop:
 47   8022 C3 22 80             jp loop
 48   8025
 49   8025
 50   8025
 51   8025              ;========================================================================
 52   8025              ;  ROUTINES
 53   8025              ;========================================================================
 54   8025
 55   8025              ;------------------------------------------------------------------------
 56   8025              ; Tiles loaders
 57   8025              ;------------------------------------------------------------------------
 58   8025              StaticHumanTileLoader:
 59   8025                      ;----------------------------------
 60   8025                      ; ASCII char 96
 61   8025                      ;----------------------------------
 62   8025 11 DA 80             ld   DE, StaticHumanTileDef_1_1
 63   8028 01 08 00             ld   BC, 8
 64   802B ED B0                ldir
 65   802D
 66   802D                      ;----------------------------------
 67   802D                      ; ASCII char 97
 68   802D                      ;----------------------------------
 69   802D 11 E2 80             ld   DE, StaticHumanTileDef_1_2
 70   8030 01 08 00             ld   BC, 8
 71   8033 ED B0                ldir
 72   8035
 73   8035                      ;----------------------------------
 74   8035                      ; ASCII char 98
 75   8035                      ;----------------------------------
 76   8035 11 EA 80             ld   DE, StaticHumanTileDef_2_1
 77   8038 01 08 00             ld   BC, 8
 78   803B ED B0                ldir
 79   803D
 80   803D                      ;----------------------------------
 81   803D                      ; ASCII char 99
 82   803D                      ;----------------------------------
 83   803D 11 F2 80             ld   DE, StaticHumanTileDef_2_2
 84   8040 01 08 00             ld   BC, 8
 85   8043 ED B0                ldir
 86   8045
 87   8045 C9                   ret
 88   8046
 89   8046                      ;---------------------------------------------------------------
 90   8046                      ; ComputeScrAddr:
 91   8046                      ;  In:  B = x (0..31 in char), D = row_in_pixels (0..191)
 92   8046                      ;  Out: HL = SCR_BASE + offset in the bitmap
 93   8046                      ;  This routine uses the classic Spectrum formula:
 94   8046                      ;    offset = ((D & 7) * 256) + ((D >> 3) * 32) + B
 95   8046                      ;    address = 16384 + offset
 96   8046                      ;---------------------------------------------------------------
 97   8046              ComputeScrAddr:
 98   8046 7A                   ld a, d            ; A = D
 99   8047 E6 07                and 0x07           ; A = D & 7
100   8049 67                   ld h, a
101   804A 2E 00                ld l, 0            ; HL = (D & 7)
102   804C                      ; Multiply HL by 256 => HL <<= 8 (7 times 'add hl,hl')
103   804C 29                   add hl, hl
104   804D 29                   add hl, hl
105   804E 29                   add hl, hl
106   804F 29                   add hl, hl
107   8050 29                   add hl, hl
108   8051 29                   add hl, hl         ; HL = (D & 7)*256
109   8052
110   8052 7A                   ld a, d
111   8053 CB 3F                srl a
112   8055 CB 3F                srl a
113   8057 CB 3F                srl a              ; A = D >> 3
114   8059 5F                   ld e, a
115   805A 16 00                ld d, 0
116   805C                      ; Multiply E by 32 => shift left by 5
117   805C 19                   add hl, de
118   805D 19                   add hl, de
119   805E 19                   add hl, de
120   805F 19                   add hl, de
121   8060 19                   add hl, de
122   8061                      ; Now HL += ((D >> 3)*32)
123   8061
124   8061 78                   ld a, b            ; Add B
125   8062 16 00                ld d, 0
126   8064 5F                   ld e, a
127   8065 19                   add hl, de
128   8066                      ; HL = offset
129   8066
130   8066 11 00 40             ld de, SCR_BASE
131   8069 19                   add hl, de         ; HL = SCR_BASE + offset
132   806A C9                   ret
133   806B
134   806B                      ;---------------------------------------------------------------
135   806B                      ; ComputeAttrAddr
136   806B                      ;  In:  B = x (char coordinate), C = y (char coordinate)
137   806B                      ;  Out: HL = ATTR_BASE + (C*32 + B)
138   806B                      ;---------------------------------------------------------------
139   806B              ComputeAttrAddr:
140   806B 79                   ld a, c
141   806C 26 00                ld h, 0
142   806E 6F                   ld l, a
143   806F                      ; multiply HL by 32 (shift left 5 times)
144   806F 29                   add hl, hl
145   8070 29                   add hl, hl
146   8071 29                   add hl, hl
147   8072 29                   add hl, hl
148   8073 29                   add hl, hl
149   8074                      ; now HL = c*32
150   8074 78                   ld a, b
151   8075 5F                   ld e, a
152   8076 16 00                ld d, 0
153   8078 19                   add hl, de
154   8079                      ; HL = c*32 + b
155   8079 11 00 58             ld de, ATTR_BASE
156   807C 19                   add hl, de
157   807D C9                   ret
158   807E
159   807E                      ;---------------------------------------------------------------
160   807E                      ; GetCharAddressInRAMFont:
161   807E                      ;  In:  A = ASCII code (32..127)
162   807E                      ;  Out: HL = address of its 8-byte data in RAMCharSet
163   807E                      ;  offset = (A - 32)*8
164   807E                      ;---------------------------------------------------------------
165   807E              GetCharAddressInRAMFont:
166   807E 21 B8 88             ld hl, RAMCharSet
167   8081 D6 20                sub 32          ; A = A - 32
168   8083 5F                   ld e, a
169   8084 16 00                ld d, 0
170   8086                      ; Multiply (A - 32) by 8 => repeated additions
171   8086 19                   add hl, de
172   8087 19                   add hl, de
173   8088 19                   add hl, de
174   8089 19                   add hl, de
175   808A 19                   add hl, de
176   808B 19                   add hl, de
177   808C 19                   add hl, de
178   808D 19                   add hl, de
179   808E                      ; Now HL = RAMCharSet + (A-32)*8
180   808E C9                   ret
181   808F
182   808F                      ;---------------------------------------------------------------
183   808F                      ; Draw8x8Char:
184   808F                      ;  In: B = x (char coords), C = y (char coords), A = ASCII code
185   808F                      ;  Writes the 8x8 pattern directly into screen RAM
186   808F                      ;---------------------------------------------------------------
187   808F              Draw8x8Char:
188   808F                      ; 1) Set attribute = green on black
189   808F C5                   push bc
190   8090 CD 6B 80             call ComputeAttrAddr   ; HL = attribute location for (B,C)
191   8093 36 02                ld (hl), GREEN_ON_BLACK
192   8095 C1                   pop bc
193   8096
194   8096                      ; 2) Get the 8x8 pattern address in DE
195   8096 F5                   push af
196   8097 CD 7E 80             call GetCharAddressInRAMFont  ; HL = base of 8x8
197   809A EB                   ex de, hl                     ; DE = font address
198   809B F1                   pop af                        ; A = ASCII code
199   809C
200   809C                      ; 3) For each of the 8 rows (0..7), compute the screen address
201   809C 26 00                ld h, 0                       ; we use H as a row counter
202   809E              draw8_loop:
203   809E                      ; row_in_pixels = (C*8 + H) => store in D
204   809E 79                   ld a, c
205   809F 07                   rlca               ; *2
206   80A0 07                   rlca               ; *4
207   80A1 07                   rlca               ; *8
208   80A2 84                   add a, h           ; add row
209   80A3 57                   ld d, a            ; D = row_in_pixels
210   80A4                      ; Now call ComputeScrAddr => HL = screen address for (B, row_in_pixels)
211   80A4 C5                   push bc
212   80A5 78                   ld a, b            ; store x in A
213   80A6                      ; (we keep it in B, but let's simply do it as is)
214   80A6 CD 46 80             call ComputeScrAddr ; HL = screen address
215   80A9 C1                   pop bc             ; restore B=x, C=y
216   80AA
217   80AA                      ; DE = base of character => offset by 'H'
218   80AA 7C                   ld a, h
219   80AB 83                   add a, e
220   80AC 5F                   ld e, a            ; DE = DE + H
221   80AD                      ; Copy 1 byte from (DE) to (HL)
222   80AD 1A                   ld a,(de)
223   80AE 77                   ld (hl),a
224   80AF
225   80AF 24                   inc h
226   80B0 FE 08                cp 8
227   80B2 20 EA                jr nz, draw8_loop
228   80B4 C9                   ret
229   80B5
230   80B5                      ;---------------------------------------------------------------
231   80B5                      ; Draw16x16Tile:
232   80B5                      ;  In: B=x (char coord), C=y (char coord), A=base ASCII code
233   80B5                      ;  Writes 4 consecutive chars: (A), (A+1), (A+2), (A+3)
234   80B5                      ;  in a 2x2 arrangement => 16x16 block
235   80B5                      ;---------------------------------------------------------------
236   80B5              Draw16x16Tile:
237   80B5                      ; We'll keep (x,y,base) in D,E,L
238   80B5 57                   ld d, a         ; D = base
239   80B6 58                   ld e, b         ; E = x
240   80B7 69                   ld l, c         ; L = y
241   80B8
242   80B8                      ; (A) top-left => code = D, x=E, y=L
243   80B8 7A                   ld a, d
244   80B9 43                   ld b, e
245   80BA 4D                   ld c, l
246   80BB CD 8F 80             call Draw8x8Char
247   80BE
248   80BE                      ; (A+1) top-right => (x+1,y)
249   80BE 7A                   ld a, d
250   80BF 3C                   inc a
251   80C0 43                   ld b, e
252   80C1 04                   inc b
253   80C2 4D                   ld c, l
254   80C3 CD 8F 80             call Draw8x8Char
255   80C6
256   80C6                      ; (A+2) bottom-left => (x,y+1)
257   80C6 7A                   ld a, d
258   80C7 C6 02                add a,2
259   80C9 43                   ld b, e
260   80CA 4D                   ld c, l
261   80CB 0C                   inc c
262   80CC CD 8F 80             call Draw8x8Char
263   80CF
264   80CF                      ; (A+3) bottom-right => (x+1,y+1)
265   80CF 7A                   ld a, d
266   80D0 C6 03                add a,3
267   80D2 43                   ld b, e
268   80D3 4D                   ld c, l
269   80D4 04                   inc b
270   80D5 0C                   inc c
271   80D6 CD 8F 80             call Draw8x8Char
272   80D9
273   80D9 C9                   ret
274   80DA
275   80DA              ;========================================================================
276   80DA              ; TILE DEFINITIONS
277   80DA              ;========================================================================
278   80DA
279   80DA              StaticHumanTileDef_1_1:
280   80DA 18                   db 0b00011000
281   80DB 18                   db 0b00011000
282   80DC 18                   db 0b00011000
283   80DD FF                   db 0b11111111
284   80DE FF                   db 0b11111111
285   80DF 18                   db 0b00011000
286   80E0 18                   db 0b00011000
287   80E1 18                   db 0b00011000
288   80E2
289   80E2              StaticHumanTileDef_1_2:
290   80E2 06                   db 0b00000110
291   80E3 06                   db 0b00000110
292   80E4 06                   db 0b00000110
293   80E5 FF                   db 0b11111111
294   80E6 FF                   db 0b11111111
295   80E7 06                   db 0b00000110
296   80E8 06                   db 0b00000110
297   80E9 06                   db 0b00000110
298   80EA
299   80EA              StaticHumanTileDef_2_1:
300   80EA 18                   db 0b00011000
301   80EB 18                   db 0b00011000
302   80EC 18                   db 0b00011000
303   80ED FF                   db 0b11111111
304   80EE FF                   db 0b11111111
305   80EF 18                   db 0b00011000
306   80F0 18                   db 0b00011000
307   80F1 18                   db 0b00011000
308   80F2
309   80F2              StaticHumanTileDef_2_2:
310   80F2 06                   db 0b00000110
311   80F3 06                   db 0b00000110
312   80F4 06                   db 0b00000110
313   80F5 FF                   db 0b11111111
314   80F6 FF                   db 0b11111111
315   80F7 06                   db 0b00000110
316   80F8 06                   db 0b00000110
317   80F9 06                   db 0b00000110
318   80FA
319   80FA
320   80FA              ;========================================================================
321   80FA              ; CONSTANTS
322   80FA              ;========================================================================
323   80FA              SCR_BASE        EQU 16384         ; Base address of the Spectrum screen
324   80FA              ATTR_BASE       EQU 22528         ; Start of the attribute area
325   80FA              RAMCharSet      EQU 35000         ; Example location for the custom font
326   80FA
327   80FA                      ; The attribute value for green ink (2) on black paper (0).
328   80FA                      ; Bright=0, Flash=0 => 0x02
329   80FA              GREEN_ON_BLACK  EQU 0x02
330   80FA
331   80FA              end_of_code:
332   80FA                      SAVESNA "martian.sna", start
# file closed: martian.asm
